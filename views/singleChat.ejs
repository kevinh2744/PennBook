<!DOCTYPE html>
<html>
<head>
	<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,1,0" />
	<link rel="stylesheet"
	href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<style type="text/css">
		@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
		
		body {
			background-color: #f3f8fa;
			font-family: 'Inter', 'sans-serif';
			color: #103143;
			display: flex;
			height: 100vh;			
		}
		
		main {
			display: flex;
			flex: 1;			
		}
		
		input:focus {
			outline: none !important;
		}
		
		.single-chat-wrap {
			display: flex;
			flex-direction: row;
			flex-grow: 1;			
		}
		
		.chat-sidebar {
			display: flex;
			flex-direction: column;
			align-items: flex-start;
			background-color: #fafcfd;
			padding: 4rem 8rem 0 4rem;	
			filter: drop-shadow(0px 2px 4px #dfdfdf);		
		}
		
		.chat-panel {
			display: flex;
			flex-direction: column;
			padding: 4rem 0 0 0;
			flex-grow: 1;			
		}
		
		.sidebar-header {
			font-size: 1.75rem;
			font-weight: 500;
			margin: 0 0 1rem 0;
		}
		
		.add-member-header {
			margin-top: 8rem;
		}
		
		.sidebar-form {
			display: flex;
			flex-direction: column;
		}
		
		.form-label {
			font-weight: 400;
			margin-bottom: 1rem;
		}
		
		#username-input {
			margin: 0 2rem 2rem 0;
			border-radius: 30px;
			border: solid;
			border-width: 1px;
			border-color: #cccccc;
			width: 100%;
			padding: 0 0 0 1rem;
		}
		
		#chat-info {
			font-size: 1.5rem;
			margin: 0 0 1rem 0;
		}
		
		.add-btn {
			background-color: #bbefeb;
			border: 0;
			padding: .85rem 1.75rem .85rem 1.75rem;
			border-radius: 30px;
		}
		
		#leave-btn {
			background-color: #fafcfd;
			border: solid;
			padding: .3rem 1.25rem .3rem 1.25rem;
			border-radius: 30px;
			border-width: 1px;
			border-color: #5abfb7;
			color: #5abfb7;
			font-weight: 500;
			text-align: center;
			margin-top: auto;
			margin-bottom: 2rem;
		}
		
		#leave-btn:hover {
			background-color: #5abfb7;
			color: #fafcfd;
		}
		
		.send-wrap {
			display: flex;
			flex-direction: row;
			padding: 2rem 0 2rem 2rem;
			margin-top: auto;
			height: 10%;
		}
		
		.message-input {
			width: 90%;
			margin-right: 2rem;
			border-radius: 30px;
			border: solid;
			border-width: 1px;
			border-color: #d6d6d6;
			filter: drop-shadow(0px 1px 4px #d6d6d6);
			padding: 0 0 0 1.5rem;
		}
		
		.send-btn {
			background-color: #bbefeb;
			border: 0;
			padding: .3rem 1.75rem .3rem 1.75rem;
			border-radius: 30px;
			align-self: center;
		}
		
		#send {
			margin: .5rem 0 0 .5rem;
		}
		
		#messages {
			padding: 0 0 0 4rem;
			display: flex;
			flex-direction: column;
			align-items: flex-start;
		}
		
		.other-message {
			max-width: 40%;
			padding: 1.15rem 1.75rem 1.15rem 1.75rem;
			/*color: #5abfb7;
			border: solid;
			border-width: 1.5px;*/
			background-color: #e4f0f5;
			text-align: left;
			border-radius: 30px;
			margin: 0 0 2rem 0;
		}
		
		.curr-message {
			max-width: 40%;
			padding: 1.15rem 1.75rem 1.15rem 1.75rem;
			/*color: #5abfb7;
			border: solid;
			border-width: 1.5px;*/
			background-color: #bbefeb;
			text-align: left;
			border-radius: 30px;
			margin: 0 4rem 2rem 0;
			align-self: flex-end;
		}
		
		.change-message {
			color: #cccccc;
			text-align: center;
			margin: 0 0 2rem 0;
			align-self: center;
		}
		
	    a {
			color: #5abfb7;
			text-decoration: underline;
			font-weight: 500;
			align-self: left;
			text-align: left;
		}
	</style>
</head>

<body>
  <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
  <script src="http://35.171.157.220/socket.io/socket.io.js"></script>
  <script type="text/javascript">
    var socket = io();
    var currSender = ""; // TODO: GET CURR USERNAME FROM ROUTE OR COOKIE
    /*var roomID = async function () {
    	// current chatID
		await $.get("/currchat", function(data, err) {
			return data;
		});
    }*/
    var roomID;
   	var currUser;
   	var addedUser;
   	var joinID;
    
    async function currInfo() {
    	// current chatID
		await $.get("/currchat", function(data, err) {
			roomID = data;
		});
				
		// current user
		await $.get("/curruser", function(data, err) {
			currUser = data;
		});	
    	
    	socket.emit('join room', { 
			room: roomID
		});
    }
    
	  async function joinChat() {	
	  	// set field for chat messages and members
		await $.post("/chatinfo", {
			groupchatID: joinID,
			username: currUser,
		});
		
		window.location = "/singlechat";
	  };
	  
	  async function leaveChat() {	
		await $.post("/leavechat", {
			groupchatID: roomID,
			username: currUser
		});
		
		var members;
		
		await $.get("/chatmember", function(data, err) {
				members = data;
		});
			       
       // notify each member of invite
       for (var i = 0; i < members.length; i++) {	
	      socket.emit('leave chat', { 
	        left: currUser,
	        member: members[i]
	      });
       }
       
       	var isGroup;
	
		await $.get("/isgroup", function(data, err) {
				isGroup = data;
		});
		
		if (!isGroup || isGroup == null) {
		    var inviteSender;
		
			await $.get("/chatmember", function(data, err) {
				inviteSender = data;
			});
		
			// delete notifs (currUser is invitee)
			await $.post("/deletenotif", {
				sender: inviteSender
			});
		}
		
		window.location = "/allchats";
	  };
	
	  async function addToChat() {
		event.preventDefault(); // prevent default submission behavior
		
		var isGroup;
	
		await $.get("/isgroup", function(data, err) {
				isGroup = data;
		});
		
		await $.post("/addtochat", {
			username: $('#username-input').val(),
			sender: currUser,
			chatID: roomID
		}, function(data, err) {
		document.getElementById('chat-info').innerHTML = document.getElementById('chat-info').innerHTML + ", " + $('#username-input').val();	  		
			
			if (!isGroup) {
        		// redirect the current user to the new group chat session
	        	window.location = "/singlechat";
	        }
	        
	        $('#username-input').val() = "";
		});
	  };
	
	async function notify() {
	   var joined;
	   
	   await $.get("/joinedchat", function(data, err) {
			joined = data;
	   });
	   
	   var curr;
	   
	    // current user
		await $.get("/curruser", function(data, err) {
			curr = data;
		});	
	   
          socket.emit('notifications', { 
	          room: curr
	      });
	   
	   if (!joined) {
		   var members;
		   await $.get("/chatmember", function(data, err) {
				members = data;
		   });
		   
		    // current user
			await $.get("/curruser", function(data, err) {
				currUser = data;
			});			
	       
	       // notify each member of invite
	       for (var i = 0; i < members.length; i++) {
	          socket.emit('notifications', { 
		          room: members[i]
		      });
		      
		      socket.emit('chat invite', { 
		        invitee: members[i],
		        sender: currUser,
		        chatID: roomID,
		        added: addedUser
		      });
	       }
	   }
	}
	
    async function sendMessage() {
      event.preventDefault(); // prevent default submission behavior
      //alert("roomID: " + roomID);
      //alert("SENDING MESSAGE!");
      var messageText = $('#message-input').val().trim();
            
      
      // clear input box
      $('#message-input').val('');
      
      if (messageText !== '') {
      //alert("in if");
        socket.emit('chat message', { 
          text: messageText,
          room: roomID,
          sender: currUser
        });
        //alert("emitted");
        
        
        
        await $.post("/sendmessage", {
  			text: messageText
		}, function(data, err) {				
			alert("message posted");
		});
      }
    }
    
   	async function getMembers() {	
		var members;
		
		await $.get("/chatmember", function(data, err) {
				members = data;
    	});
    	
    	return members;
    }
    
    socket.on("connect", function () {
    	// user left chat
    	 socket.on('leave chat', function (msg) {
	      	var messageTemp = document.createElement("div");
	      	messageTemp.setAttribute("class", "change-message");
	      		      	
	      	messageTemp.appendChild(document.createTextNode(msg.left + " left the chat"));
	      		      	
	      	$('#messages').append(messageTemp);
	      });
	      
	      socket.on('chat message', function (msg) {
	      	var messageTemp = document.createElement("div");
	      	//alert("created temp");
	      	if (msg.sender == currUser) {
	      		messageTemp.setAttribute("class", "curr-message");
	      	} else {
	      		messageTemp.setAttribute("class", "other-message");
	      	}
	      	
	      	// TODO: add sender/receiver class differentiation code
	      	
	      	messageTemp.appendChild(document.createTextNode(msg.text));
	      	
	      	//alert("append text");
	      	
	      	$('#messages').append(messageTemp);
	      	//alert("appended to messages");
	      	/*$('#messages').animate({
	      	  scrollTop: $('#messages').get(0).scrollHeight
	      	}, 0);*/
	      	
	      	//alert("end of message render");
	      });
	      
	      // for group chat invites
	  	  socket.on('chat invite', function (notif) {
		  	  if (notif.sender != currUser) {
		      	var notifTemp = document.createElement("li");
		        var inviteLink = document.createElement("input");
		        
		        inviteLink.setAttribute("type", "button");
		        
		        inviteLink.setAttribute("onClick", "joinChat()");
		        sender = notif.sender;
		        
		        inviteLink.setAttribute("value", "Join chat");
		        //var buttonText = document.createTextNode(notif.sender);
		        //inviteLink.innerHTML = notif.sender;
		        //inviteLink.setAttribute("id", notif.chatID);
		        //inviteLink.id = notif.chatID;
		        joinID = notif.chatID;
		        		      	
		        //inviteLink.appendChild(buttonText);
		        
		      	notifTemp.appendChild(inviteLink);
		      	
		      	
		      	$('#notifs').append(notifTemp);
		      	//alert("appended to messages");
		      	/*$('#notifs').animate({
		      	  scrollTop: $('#notifs').get(0).scrollHeight
		      	}, 0);*/
		      }
	     });
      });
    
    $(document).ready(function () {    	
    	currInfo();
    	//alert("room num: " + currRoom);
    	notify();
    	
    	// TODO: REMOVE HARDCODING
	    /*socket.emit('join room', { 
			room: roomID
		});*/
    });
  </script>
  <main>
  <div class="single-chat-wrap">
  	<div class="chat-sidebar">
  		<a href="/allchats">Back to all chats & invite</a>
  		<div id="chat-info">
	  	<%if (member != null) { %>
	    Chatting with: 
    	  <% for(var i = 0; i < member.length; i++) { %>
    	  	<% if (i == member.length - 1) { %>
			   <%= member[i] %>
			<% } else { %>
				<%= member[i] + ", " %>
			<% } %>
		  	<% } %>
	  <% } %>
	  </div>
	  <div class="sidebar-header">Notifications</div>
	  <ul id="notifs"></ul>
	  <div class="sidebar-header add-member-header">Add chat member</div>
	  <form class="sidebar-form" action="" method="" onSubmit="return false">
	  	<label class="form-label" for="uname">Username</label>
	    <input type="text" name="username" id="username-input">
	    <input class="add-btn" type="submit" value="Add" onClick="addToChat()">
	  </form>
	  <button type="button" id="leave-btn" onClick="leaveChat()">Leave chat</button>
  	</div>
  	<div class="chat-panel">
	    <div id="messages">
	      <%if (messages != null) { %>
		      <% for(var i = 0; i < messages.length; i++) { %>
		      	<% if (messages[i].sender.S == currUser) { %>
				   <div class="curr-message"> <%= messages[i].message.S %></div>
				<% } else { %>
					<div class="other-message"> <%= messages[i].message.S %></div>
				<% } %>
			  <% } %>
		  <% } %>
	  </div>
	<form class="send-wrap" action="" method="" onSubmit="return false">
	  <input class="message-input" type="text" name="message" id="message-input">
	  <button type="button" id="send-btn" class="send-btn" onClick="sendMessage()">	<span id="send" class="material-symbols-rounded">
		send
		</span>
	</button>
	</form>
	</div>
	</div>
  </main>
</body>
</html>
